"""Add state field and comments to events

Revision ID: b131afd18cba
Revises: 
Create Date: 2025-03-25 11:43:17.680585

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.sql import table, column
from sqlalchemy.dialects.postgresql import JSON


# revision identifiers, used by Alembic.
revision = 'b131afd18cba'
down_revision = None
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    # First add state column as nullable
    op.add_column('events', sa.Column('state', sa.String(), nullable=True))
    
    # Create a table representation for update statement
    events = table('events', column('state'))
    
    # Update existing records to have 'green' state
    op.execute(events.update().values(state='green'))
    
    # Now make the state column NOT NULL
    op.alter_column('events', 'state', nullable=False)
    
    # Add other columns
    op.add_column('events', sa.Column('updated_at', sa.DateTime(timezone=True), nullable=True))
    op.alter_column('events', 'map_id',
               existing_type=sa.INTEGER(),
               nullable=False)
    op.alter_column('events', 'status',
               existing_type=sa.VARCHAR(),
               nullable=False,
               existing_server_default=sa.text("'open'::character varying"))
    
    # Add a new column for active_maps as JSON
    op.add_column('events', sa.Column('active_maps_json', JSON(), nullable=True))
    
    # Set default empty array for active_maps_json
    op.execute("UPDATE events SET active_maps_json = '[]'::json")
    
    # Now drop the old active_maps column
    op.drop_column('events', 'active_maps')
    
    # Rename active_maps_json to active_maps
    op.alter_column('events', 'active_maps_json', new_column_name='active_maps')
    
    # Create event_comments table
    op.create_table('event_comments',
        sa.Column('id', sa.Integer(), nullable=False),
        sa.Column('event_id', sa.Integer(), nullable=False),
        sa.Column('user_id', sa.Integer(), nullable=False),
        sa.Column('content', sa.String(), nullable=False),
        sa.Column('image_url', sa.String(), nullable=True),
        sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
        sa.Column('updated_at', sa.DateTime(timezone=True), nullable=True),
        sa.Column('metadata', sa.JSON(), nullable=True),
        sa.ForeignKeyConstraint(['event_id'], ['events.id'], ondelete='CASCADE'),
        sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
        sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_event_comments_id'), 'event_comments', ['id'], unique=False)
    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(op.f('ix_event_comments_id'), table_name='event_comments')
    op.drop_table('event_comments')
    
    # Add a new column for active_maps as VARCHAR
    op.add_column('events', sa.Column('active_maps_varchar', sa.VARCHAR(), nullable=True))
    
    # Set empty string for active_maps_varchar
    op.execute("UPDATE events SET active_maps_varchar = ''")
    
    # Now drop the JSON active_maps column
    op.drop_column('events', 'active_maps')
    
    # Rename active_maps_varchar to active_maps
    op.alter_column('events', 'active_maps_varchar', new_column_name='active_maps')
    
    op.alter_column('events', 'status',
               existing_type=sa.VARCHAR(),
               nullable=True,
               existing_server_default=sa.text("'open'::character varying"))
    op.alter_column('events', 'map_id',
               existing_type=sa.INTEGER(),
               nullable=True)
    op.drop_column('events', 'updated_at')
    op.drop_column('events', 'state')
    # ### end Alembic commands ### 