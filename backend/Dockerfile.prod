FROM python:3.11-slim as builder

WORKDIR /app

# Install system dependencies with improved retry logic for hash sum mismatches
RUN apt-get clean && \
    rm -rf /var/lib/apt/lists/* && \
    mkdir -p /var/lib/apt/lists/partial && \
    for i in $(seq 1 3); do \
        apt-get update -y && break || sleep 5; \
    done && \
    for i in $(seq 1 3); do \
        apt-get install -y --no-install-recommends \
        build-essential \
        libpq-dev \
        && break || sleep 5; \
    done && \
    apt-get clean && \
    rm -rf /var/lib/apt/lists/*

# Install Python dependencies
COPY requirements.txt .
RUN pip install --no-cache-dir --upgrade pip && \
    pip wheel --no-cache-dir --wheel-dir /app/wheels -r requirements.txt

# Second stage: final image
FROM python:3.11-slim

WORKDIR /app

# Set environment variables
ENV PYTHONDONTWRITEBYTECODE=1 \
    PYTHONUNBUFFERED=1 \
    # Default port is 8080 for Cloud Run
    PORT=8080 \
    # Set database timeouts
    SQLALCHEMY_ENGINE_OPTIONS='{"connect_args": {"connect_timeout": 5}}' \
    # Safety check for database connection
    DB_CONNECT_RETRY=3 \
    DB_CONNECT_RETRY_DELAY=5

# Install runtime dependencies with improved retry logic
RUN apt-get clean && \
    rm -rf /var/lib/apt/lists/* && \
    mkdir -p /var/lib/apt/lists/partial && \
    for i in $(seq 1 3); do \
        apt-get update -y && break || sleep 5; \
    done && \
    for i in $(seq 1 3); do \
        apt-get install -y --no-install-recommends \
        libpq5 \
        curl \
        gnupg \
        && break || sleep 5; \
    done && \
    apt-get clean && \
    rm -rf /var/lib/apt/lists/*

# Install Google Cloud SDK with retry logic
RUN echo "deb [signed-by=/usr/share/keyrings/cloud.google.gpg] https://packages.cloud.google.com/apt cloud-sdk main" | \
    tee -a /etc/apt/sources.list.d/google-cloud-sdk.list && \
    for i in $(seq 1 3); do \
        curl https://packages.cloud.google.com/apt/doc/apt-key.gpg | \
        apt-key --keyring /usr/share/keyrings/cloud.google.gpg add - && break || sleep 5; \
    done && \
    apt-get clean && \
    rm -rf /var/lib/apt/lists/* && \
    mkdir -p /var/lib/apt/lists/partial && \
    for i in $(seq 1 3); do \
        apt-get update -y && break || sleep 5; \
    done && \
    for i in $(seq 1 3); do \
        apt-get install -y --no-install-recommends google-cloud-cli && break || sleep 5; \
    done && \
    apt-get clean && \
    rm -rf /var/lib/apt/lists/*

# Copy wheels from builder stage
COPY --from=builder /app/wheels /wheels
# Install Python packages
RUN pip install --no-cache-dir --upgrade pip && \
    pip install --no-cache-dir /wheels/* && \
    # Explicitly install pydantic-settings to fix missing dependency
    pip install --no-cache-dir pydantic-settings>=2.0.3

# Copy entrypoint script first and make it executable
COPY docker-entrypoint.sh /app/
RUN chmod 755 /app/docker-entrypoint.sh

# Copy configuration override scripts and make them executable
COPY override_config.py /app/
RUN chmod 755 /app/override_config.py

# Copy patch scripts and make them executable
COPY patch_main.py /app/
RUN chmod 755 /app/patch_main.py

# Copy application code
COPY . .

# Ensure entrypoint script is still executable after copying all files
RUN chmod 755 /app/docker-entrypoint.sh

# Create required directories
RUN mkdir -p /app/uploads/events /app/uploads/comments /app/credentials /app/logs

# Set environment variable for GCP credentials
ENV GOOGLE_APPLICATION_CREDENTIALS=/app/credentials/gcp-credentials.json

# Create a non-root user to run the application
RUN adduser --disabled-password --gecos "" appuser && \
    chown -R appuser:appuser /app && \
    # Ensure the entrypoint script is executable by everyone
    chmod 755 /app/docker-entrypoint.sh

# Switch to non-root user
USER appuser

# Use the entrypoint script to start the server
ENTRYPOINT ["/app/docker-entrypoint.sh"] 